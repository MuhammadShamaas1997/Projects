;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14-Oct-20 8:31:34 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF45  	GOTO        138
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_SPI1_Init:
;__Lib_SPI_c345d014.c,25 :: 		
;__Lib_SPI_c345d014.c,26 :: 		
0x001C	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345d014.c,27 :: 		
0x001E	0x0EFF      	MOVLW       _SPI1_Read
0x0020	0x6E1B      	MOVWF       _SPI_Rd_Ptr 
0x0022	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0024	0x6E1C      	MOVWF       _SPI_Rd_Ptr+1 
0x0026	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0028	0x6E1D      	MOVWF       _SPI_Rd_Ptr+2 
0x002A	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x002C	0x6E1E      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_c345d014.c,28 :: 		
0x002E	0x0E4E      	MOVLW       _SPI1_Write
0x0030	0x6E17      	MOVWF       _SPI_Wr_Ptr 
0x0032	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x0034	0x6E18      	MOVWF       _SPI_Wr_Ptr+1 
0x0036	0x0E21      	MOVLW       FARG_SPI1_Write_data_
0x0038	0x6E19      	MOVWF       _SPI_Wr_Ptr+2 
0x003A	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x003C	0x6E1A      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345d014.c,30 :: 		
0x003E	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345d014.c,31 :: 		
0x0040	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;__Lib_SPI_c345d014.c,32 :: 		
0x0042	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345d014.c,34 :: 		
0x0044	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345d014.c,35 :: 		
0x0046	0x0E40      	MOVLW       64
0x0048	0x6EC7      	MOVWF       SSP1STAT 
;__Lib_SPI_c345d014.c,36 :: 		
0x004A	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345d014.c,38 :: 		
L_end_SPI1_Init:
0x004C	0x0012      	RETURN      0
; end of _SPI1_Init
_SPI1_Write:
;__Lib_SPI_c345d014.c,84 :: 		
;__Lib_SPI_c345d014.c,87 :: 		
0x004E	0xFFC9C021  	MOVFF       FARG_SPI1_Write_data_, SSP1BUF
;__Lib_SPI_c345d014.c,88 :: 		
L_SPI1_Write8:
0x0052	0xB0C7      	BTFSC       SSP1STAT, 0 
0x0054	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345d014.c,89 :: 		
0x0056	0x0000      	NOP
0x0058	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345d014.c,90 :: 		
0x005A	0xF000CFC9  	MOVFF       SSP1BUF, R0
;__Lib_SPI_c345d014.c,92 :: 		
L_end_SPI1_Write:
0x005E	0x0012      	RETURN      0
; end of _SPI1_Write
_DAC_Output:
;MyProject.c,17 :: 		void DAC_Output(unsigned int valueDAC) {
;MyProject.c,20 :: 		Chip_Select = 0;                       // Select DAC chip
0x0060	0x9082      	BCF         RC0_bit, BitPos(RC0_bit+0) 
;MyProject.c,23 :: 		temp = (valueDAC >> 8) & 0x0F;         // Store valueDAC[11..8] to temp[3..0]
0x0062	0xF000C020  	MOVFF       FARG_DAC_Output_valueDAC+1, R0
0x0066	0x6A01      	CLRF        R1 
0x0068	0x0E0F      	MOVLW       15
0x006A	0x1400      	ANDWF       R0, 0 
0x006C	0x6E21      	MOVWF       FARG_SPI1_Write_data_ 
;MyProject.c,24 :: 		temp |= 0x30;                          // Define DAC setting, see MCP4921 datasheet
0x006E	0x0E30      	MOVLW       48
0x0070	0x1221      	IORWF       FARG_SPI1_Write_data_, 1 
;MyProject.c,25 :: 		SPI1_Write(temp);                      // Send high byte via SPI
0x0072	0xDFED      	RCALL       _SPI1_Write
;MyProject.c,29 :: 		SPI1_Write(temp);                      // Send low byte via SPI
0x0074	0xF021C01F  	MOVFF       FARG_DAC_Output_valueDAC, FARG_SPI1_Write_data_
0x0078	0xDFEA      	RCALL       _SPI1_Write
;MyProject.c,31 :: 		Chip_Select = 1;                       // Deselect DAC chip
0x007A	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
;MyProject.c,32 :: 		}
L_end_DAC_Output:
0x007C	0x0012      	RETURN      0
; end of _DAC_Output
_InitMain:
;MyProject.c,8 :: 		void InitMain() {
;MyProject.c,9 :: 		TRISA0_bit = 1;                        // Set RA0 pin as input
0x007E	0x8092      	BSF         TRISA0_bit, BitPos(TRISA0_bit+0) 
;MyProject.c,10 :: 		TRISA1_bit = 1;                        // Set RA1 pin as input
0x0080	0x8292      	BSF         TRISA1_bit, BitPos(TRISA1_bit+0) 
;MyProject.c,11 :: 		Chip_Select = 1;                       // Deselect DAC
0x0082	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
;MyProject.c,12 :: 		Chip_Select_Direction = 0;             // Set CS# pin as Output
0x0084	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;MyProject.c,13 :: 		SPI1_Init();                           // Initialize SPI module
0x0086	0xDFCA      	RCALL       _SPI1_Init
;MyProject.c,14 :: 		}
L_end_InitMain:
0x0088	0x0012      	RETURN      0
; end of _InitMain
_main:
;MyProject.c,34 :: 		void main() {
;MyProject.c,35 :: 		ANSELA = 0;
0x008A	0x010F      	MOVLB       15
0x008C	0x6B38      	CLRF        ANSELA, 1
;MyProject.c,36 :: 		ANSELB = 0;
0x008E	0x6B39      	CLRF        ANSELB, 1
;MyProject.c,37 :: 		ANSELC = 0;
0x0090	0x6B3A      	CLRF        ANSELC, 1
;MyProject.c,38 :: 		ANSELD = 0;
0x0092	0x6B3B      	CLRF        ANSELD, 1
;MyProject.c,39 :: 		ANSELE = 0;
0x0094	0x6B3C      	CLRF        ANSELE, 1
;MyProject.c,40 :: 		InitMain();                            // Perform main initialization
0x0096	0xDFF3      	RCALL       _InitMain
;MyProject.c,42 :: 		value = 2048;                          // When program starts, DAC gives
0x0098	0x0E00      	MOVLW       0
0x009A	0x6E15      	MOVWF       _value 
0x009C	0x0E08      	MOVLW       8
0x009E	0x6E16      	MOVWF       _value+1 
;MyProject.c,45 :: 		while (1) {                             // Endless loop
L_main0:
;MyProject.c,47 :: 		if ((RA0_bit) && (value < 4095)) {   // If RA0 button is pressed
0x00A0	0xA080      	BTFSS       RA0_bit, BitPos(RA0_bit+0) 
0x00A2	0xD009      	BRA         L_main4
0x00A4	0x0E0F      	MOVLW       15
0x00A6	0x5C16      	SUBWF       _value+1, 0 
0x00A8	0xE102      	BNZ         L__main15
0x00AA	0x0EFF      	MOVLW       255
0x00AC	0x5C15      	SUBWF       _value, 0 
L__main15:
0x00AE	0xE203      	BC          L_main4
L__main11:
;MyProject.c,48 :: 		value++;                           //   increment value
0x00B0	0x4A15      	INFSNZ      _value, 1 
0x00B2	0x2A16      	INCF        _value+1, 1 
;MyProject.c,49 :: 		}
0x00B4	0xD00E      	BRA         L_main5
L_main4:
;MyProject.c,51 :: 		if ((RA1_bit) && (value > 0)) {    // If RA1 button is pressed
0x00B6	0xA280      	BTFSS       RA1_bit, BitPos(RA1_bit+0) 
0x00B8	0xD00C      	BRA         L_main8
0x00BA	0x0E00      	MOVLW       0
0x00BC	0x6E00      	MOVWF       R0 
0x00BE	0x5016      	MOVF        _value+1, 0 
0x00C0	0x5C00      	SUBWF       R0, 0 
0x00C2	0xE102      	BNZ         L__main16
0x00C4	0x5015      	MOVF        _value, 0 
0x00C6	0x0800      	SUBLW       0
L__main16:
0x00C8	0xE204      	BC          L_main8
L__main10:
;MyProject.c,52 :: 		value--;                         //   decrement value
0x00CA	0x0E01      	MOVLW       1
0x00CC	0x5E15      	SUBWF       _value, 1 
0x00CE	0x0E00      	MOVLW       0
0x00D0	0x5A16      	SUBWFB      _value+1, 1 
;MyProject.c,53 :: 		}
L_main8:
;MyProject.c,54 :: 		}
L_main5:
;MyProject.c,55 :: 		DAC_Output(value);                   // Send value to DAC chip
0x00D2	0xF01FC015  	MOVFF       _value, FARG_DAC_Output_valueDAC
0x00D6	0xF020C016  	MOVFF       _value+1, FARG_DAC_Output_valueDAC+1
0x00DA	0xDFC2      	RCALL       _DAC_Output
;MyProject.c,56 :: 		Delay_ms(1);                         // Slow down key repeat pace
0x00DC	0x0E03      	MOVLW       3
0x00DE	0x6E0C      	MOVWF       R12, 0
0x00E0	0x0E97      	MOVLW       151
0x00E2	0x6E0D      	MOVWF       R13, 0
L_main9:
0x00E4	0x2E0D      	DECFSZ      R13, 1, 0
0x00E6	0xD7FE      	BRA         L_main9
0x00E8	0x2E0C      	DECFSZ      R12, 1, 0
0x00EA	0xD7FC      	BRA         L_main9
0x00EC	0x0000      	NOP
0x00EE	0x0000      	NOP
;MyProject.c,57 :: 		}
0x00F0	0xD7D7      	BRA         L_main0
;MyProject.c,58 :: 		}
L_end_main:
0x00F2	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [50]    _SPI1_Init
0x004E      [18]    _SPI1_Write
0x0060      [30]    _DAC_Output
0x007E      [12]    _InitMain
0x008A     [106]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _value
0x0017       [4]    _SPI_Wr_Ptr
0x001B       [4]    _SPI_Rd_Ptr
0x001F       [2]    FARG_DAC_Output_valueDAC
0x0021       [1]    FARG_SPI1_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F3B       [1]    ANSELD
0x0F3C       [1]    ANSELE
0x0F80       [0]    RA1_bit
0x0F80       [0]    RA0_bit
0x0F82       [0]    RC0_bit
0x0F82       [0]    Chip_Select
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA1_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    Chip_Select_Direction
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC3_bit
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
